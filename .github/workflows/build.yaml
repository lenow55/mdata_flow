on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

name: Build

defaults:
  run:
    shell: bash

jobs:
  ruff-formatting-check:
    name: Check formatting
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/setup-python@v2.2.2
      - uses: astral-sh/ruff-action@v3
        with:
          args: "format --check"
  build:
    name: Build tool
    runs-on: ${{ matrix.os }}
    needs: ruff-formatting-check
    env:
      POETRY_HOME: /opt/poetry
    strategy:
      matrix:
        os:
          - "ubuntu-latest"
          - "windows-latest"
        python-version:
          - "3.11"
          - "3.12"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}
      # Perma-cache Poetry since we only need it for checking pyproject version
      - name: Install poetry with pipx
        uses: BrandonLWhite/pipx-install-action
      - name: Get Poetry version
        run: poetry --version
      - name: Check pyproject.toml validity
        run: poetry check --no-interaction
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/.venv
          key: ${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ matrix.os }}-
      - name: Install deps
        if: steps.cache-deps.cache-hit != 'true'
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction
      - name: Run tests
        run: poetry run pytest -v
      - name: Build artifacts
        run: poetry build
