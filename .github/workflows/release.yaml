on:
  push:
    tags:
      - "v*.*.*"

name: Create Release

permissions:
  contents: write

jobs:
  autorelease:
    name: Create Release
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: "3.12"
      # Perma-cache Poetry since we only need it for checking pyproject version
      # It uses cache by default
      - name: Install poetry with pipx
        uses: BrandonLWhite/pipx-install-action@v1.0.1

      - name: Add version to environment vars
        run: |
          PROJECT_VERSION=$(poetry version --short)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

          # Определяем, является ли версия пререлизом
          if [[ "$PROJECT_VERSION" == *"rc"* ]]; then
            echo "PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "PRERELEASE=false" >> $GITHUB_ENV
          fi

      - name: Check if tag version matches project version
        run: |
          TAG=$(git describe HEAD --tags --abbrev=0)
          echo $TAG
          echo $PROJECT_VERSION
          if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi

      - name: Get Poetry version
        run: poetry --version
      - name: Check pyproject.toml validity
        run: poetry check --no-interaction
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/.venv
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: poetry-
      - name: Install deps
        if: steps.cache-deps.cache-hit != 'true'
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction
      - name: Run tests
        run: poetry run pytest -v
      - name: Build
        run: poetry build
      - name: Release Notes
        run: git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"
      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        with:
          body_path: ".github/RELEASE-TEMPLATE.md"
          draft: true
          prerelease: ${{ env.PRERELEASE }}
          files: |
            dist/mdata_flow-${{env.PROJECT_VERSION}}-py3-none-any.whl
            dist/mdata_flow-${{env.PROJECT_VERSION}}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
